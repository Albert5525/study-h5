/*
*   在项目中安装包的命令
*   npm install 包的完整命令;等价于npm i包的完整命令;
*
*   安装moment包
*   npm install moment -g;//-g代表全局安装
*
*   包安装后多了那些文件：
*       包安装完成后，在项目文件夹下多一个叫做node_modules的文件夹和package-lock.json的配置文件
*       其中：
*           node_modules文件夹用来存放所有已安装到项目中的包。require()导入第三方包时，就是从这个目录中查找并加载包。
*           package-lock.json配置文件用来记录node_modules目录下的每一个包的下载信息，例如包的名字，版本号，下载地址等。
*   注意：程序员不要手动修改node_modules或package-lock.json文件中的任何代码，npm包管理工具会自动维护他们。
*
*
*   安装指定版本的包：
*       默认情况下，使用npm install命令安装包的时候，会自动安装最新版本的包，入股偶需要安装置顶版本的包，可以在包名之后通过@符号指定具体的版本，例如
*       npm install moment@2.22.2
*
*   包的语义化版本规范：
*       包的版本号是哟“点分十进制”形式进行定义的，总共有三位数字，例如2.24.0
*       其中每一位数字所代表的含义如下
*       第一位数字：大版本
*       第二位数字：功能版本
*       第三位数字：Bug修复版本
*       版本号提升的规则：只要前面的版本号增长了，则后面的版本号归零
*
*
*   包管理配置文件
*       npm规定，在项目根目录中，必须提供一个叫做package.json的包管理配置文件。用来记录与项目有关的一些配置信息。例如：
*           项目的名称，版本号，描述等
*           项目中都用到了那些包
*           那些包只在开发期间会用到
*           那些包在开发和部署阶段都需要用到
*   如何记录项目中安装了那些包
*       在项目根目录中，创建一个叫做package.json的配置文件，即可用记录项目中安装了那些包，从而方便剔除node_modules目录之后，共享源代码。
*       这也就需要在开发项目是，一定要把node_modules文件夹，添加到.gitignore忽略文件中。
* */

const moment = require('moment');
console.log(moment().format('YYYY-MM-DD HH:mm:ss').toString());